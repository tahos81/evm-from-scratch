STOP:
  code:
    - STOP
  expect:
    success: true
    stack: []

PUSH:
  code:
    - PUSH1 1
  expect:
    stack: [1n]

PUSH (twice):
  code:
    - PUSH1 1
    - PUSH1 2
  expect:
    # note the order of items in `expect`: your implementation might keep
    # the items in a reversed order (e.g. in JavaScript `push` appends items
    # to the end of the array)
    stack: [2n, 1n]

POP:
  code:
    - PUSH1 1
    - PUSH1 2
    - POP
  expect:
    stack: [1n]

STOP (midway):
  code:
    - PUSH1 1
    - STOP
    - PUSH1 2
  expect:
    stack: [1n]

ADD:
  code:
    - PUSH1 0x01
    - PUSH1 0x02
    - ADD
  expect:
    stack: [3n]

ADD (overflow):
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    - PUSH1 0x02
    - ADD
  expect:
    stack: [1n]

MUL:
  code:
    - PUSH1 0x02
    - PUSH1 0x03
    - MUL
  expect:
    stack: [6n]

MUL (overflow):
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    - PUSH1 0x02
    - MUL
  expect:
    stack: [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffen]

SUB:
  code:
    - PUSH1 0x02
    - PUSH1 0x03
    - SUB
  expect:
    stack: [1n]

SUB (underflow):
  code:
    - PUSH1 0x03
    - PUSH1 0x02
    - SUB
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

DIV:
  code:
    - PUSH1 0x02
    - PUSH1 0x06
    - DIV
  expect:
    stack: [3n]

DIV (whole):
  code:
    - PUSH1 0x06
    - PUSH1 0x02
    - DIV
  expect:
    stack: [0n]

DIV (by zero):
  code:
    - PUSH1 0x00
    - PUSH1 0x02
    - DIV
  expect:
    stack: [0n]

MOD:
  code:
    - PUSH1 3
    - PUSH1 10
    - MOD
  expect:
    stack: [1n]

MOD (by larger number):
  code:
    - PUSH1 17
    - PUSH1 5
    - MOD
  expect:
    stack: [5n]

MOD (by zero):
  code:
    - PUSH1 0
    - PUSH1 2
    - MOD
  expect:
    stack: [0n]

ADDMOD:
  code:
    - PUSH1 8
    - PUSH1 10
    - PUSH1 10
    - ADDMOD
  expect:
    stack: [4n]

ADDMOD (wrapped):
  code:
    - PUSH1 2
    - PUSH1 2
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    - ADDMOD
  expect:
    stack: [1n]

MULMOD:
  code:
    - PUSH1 8
    - PUSH1 10
    - PUSH1 10
    - MULMOD
  expect:
    stack: [4n]

MULMOD (wrapped):
  code:
    - PUSH1 12
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    - MULMOD
  expect:
    stack: [9n]

EXP:
  code:
    - PUSH1 2
    - PUSH1 10
    - EXP
  expect:
    stack: [100n]

SIGNEXTEND (positive):
  code:
    - PUSH1 0x7F
    - PUSH1 0
    - SIGNEXTEND
  expect:
    stack: [0x7fn]

SIGNEXTEND (negative):
  code:
    - PUSH1 0xFF
    - PUSH1 0
    - SIGNEXTEND
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

SDIV:
  code:
    - PUSH1 10
    - PUSH1 10
    - SDIV
  expect:
    stack: [1n]

SDIV (negative):
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - SDIV
  expect:
    stack: [2n]

SDIV (mix of negative and positive):
  code:
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - PUSH1 10
    - SDIV
  expect:
    stack: [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbn] # -5

SMOD:
  code:
    - PUSH1 3
    - PUSH1 10
    - SMOD
  expect:
    stack: [1n]

SMOD (negative):
  code:
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd # -3
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8 # -10
    - SMOD
  expect:
    stack: [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffen] # -1

SMOD (by zero):
  code:
    - PUSH1 0x00
    - PUSH1 0x02
    - SMOD
  expect:
    stack: [0n]

LT:
  code:
    - PUSH1 10
    - PUSH1 9
    - LT
  expect:
    stack: [1n]

LT (equal):
  code:
    - PUSH1 10
    - PUSH1 10
    - LT
  expect:
    stack: [0n]

LT (greater):
  code:
    - PUSH1 10
    - PUSH1 11
    - LT
  expect:
    stack: [0n]

GT:
  code:
    - PUSH1 9
    - PUSH1 10
    - GT
  expect:
    stack: [1n]

GT (equal):
  code:
    - PUSH1 10
    - PUSH1 10
    - GT
  expect:
    stack: [0n]

GT (less):
  code:
    - PUSH1 11
    - PUSH1 10
    - GT
  expect:
    stack: [0n]

SLT:
  code:
    - PUSH1 0
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - SLT
  expect:
    stack: [1n]

SLT (equal):
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - SLT
  expect:
    stack: [0n]

SLT (greater):
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff # -1
    - PUSH1 0
    - SLT
  expect:
    stack: [0n]

SGT:
  code:
    - PUSH1 9
    - PUSH1 10
    - SGT
  expect:
    stack: [1n]

SGT (equal):
  code:
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - PUSH32 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe # -2
    - SGT
  expect:
    stack: [0n]

SGT (less):
  code:
    - PUSH1 10
    - PUSH1 11
    - SGT
  expect:
    stack: [1n]

EQ:
  code:
    - PUSH1 10
    - PUSH1 10
    - EQ
  expect:
    stack: [1n]

EQ (not equal):
  code:
    - PUSH1 9
    - PUSH1 10
    - EQ
  expect:
    stack: [0n]

ISZERO (not zero):
  code:
    - PUSH1 9
    - ISZERO
  expect:
    stack: [0n]

ISZERO (zero):
  code:
    - PUSH1 0
    - ISZERO
  expect:
    stack: [1n]

AND:
  code:
    - PUSH1 0xe
    - PUSH1 0x3
    - AND
  expect:
    stack: [2n]

OR:
  code:
    - PUSH1 0xe
    - PUSH1 0x3
    - OR
  expect:
    stack: [0xfn]

XOR:
  code:
    - PUSH1 0xf0
    - PUSH1 0x0f
    - XOR
  expect:
    stack: [0xffn]

SHL:
  code:
    - PUSH1 1
    - PUSH1 1
    - SHL
  expect:
    stack: [2n]

SHL (discards):
  code:
    - PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000
    - PUSH1 4
    - SHL
  expect:
    stack: [0xf000000000000000000000000000000000000000000000000000000000000000n]

SHL (too large):
  code:
    - PUSH1 1
    - PUSH4 0xFFFFFFFF
    - SHL
  expect:
    stack: [0n]

SHR:
  code:
    - PUSH1 2
    - PUSH1 1
    - SHR
  expect:
    stack: [1n]

SHR (discards):
  code:
    - PUSH1 0xFF
    - PUSH1 4
    - SHR
  expect:
    stack: [0x0fn]

SHR (too large):
  code:
    - PUSH1 1
    - PUSH4 0xFFFFFFFF
    - SHR
  expect:
    stack: [0n]

SAR:
  code:
    - PUSH1 2
    - PUSH1 1
    - SAR
  expect:
    stack: [1n]

SAR (fills 1s):
  code:
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
    - PUSH1 4
    - SAR
  expect:
    stack: [0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0n]

SAR (too large):
  code:
    - PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
    - PUSH4 0xFFFFFFFF
    - SAR
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

SAR (positive, too large):
  code:
    - PUSH32 0x0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00
    - PUSH4 0xFFFFFFFF
    - SAR
  expect:
    stack: [0x0n]

NOT:
  code:
    - PUSH1 0x0f
    - NOT
  expect:
    stack: [0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0n]

BYTE:
  code:
    - PUSH1 0xff
    - PUSH1 31
    - BYTE
  expect:
    stack: [0xffn]

BYTE (30th):
  code:
    - PUSH2 0xff00
    - PUSH1 30
    - BYTE
  expect:
    stack: [0xffn]

BYTE (29th):
  code:
    - PUSH3 0xff0000
    - PUSH1 29
    - BYTE
  expect:
    stack: [0xffn]

BYTE (out of range):
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    - PUSH1 42
    - BYTE
  expect:
    stack: [0x0n]

DUP1:
  code:
    - PUSH1 1
    - DUP1
    - ADD
  expect:
    stack: [2n]

DUP3:
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - PUSH1 3 # [3, 2, 1]
    - DUP3
  expect:
    stack: [1n, 3n, 2n, 1n]

SWAP:
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - SWAP1 # [1, 2]
  expect:
    stack: [1n, 2n]

SWAP3:
  code:
    - PUSH1 1 # [1]
    - PUSH1 2 # [2, 1]
    - PUSH1 3 # [3, 2, 1]
    - PUSH1 4 # [4, 3, 2, 1]
    - SWAP3 # [1, 3, 2, 4]
  expect:
    stack: [1n, 3n, 2n, 4n]

INVALID:
  code:
    - INVALID
  expect:
    success: false
    stack: []

PC:
  code:
    - PC
  expect:
    stack: [0n]

PC (more code):
  code:
    - PUSH1 0 # 2 bytes
    - POP # 1 byte
    - PC
  expect:
    stack: [3n]

GAS:
  code:
    - GAS
  expect:
    stack: [0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn]

JUMP:
  code:
    - PUSH1 5
    - JUMP
    - PUSH1 1
    - JUMPDEST # location 5
    - PUSH1 2
  expect:
    stack: [2n] # 1 is never on the stack

JUMPI (no jump):
  code:
    - PUSH1 0
    - PUSH1 7
    - JUMPI
    - PUSH1 1
    - JUMPDEST
    - PUSH1 2
    - POP
  expect:
    stack: [1n]

JUMPI (jump):
  code:
    - PUSH1 1
    - PUSH1 7
    - JUMPI
    - PUSH1 1
    - JUMPDEST
    - PUSH1 2
  expect:
    stack: [2n]

MSTORE:
  code:
    - PUSH32 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20
    - PUSH1 0
    - MSTORE
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20n]

MSTORE (tail):
  code:
    - PUSH32 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20
    - PUSH1 0
    - MSTORE
    - PUSH1 31
    - MLOAD
  expect:
    stack: [0x2000000000000000000000000000000000000000000000000000000000000000n]

MSTORE8:
  code:
    - PUSH1 0xff
    - PUSH1 31
    - MSTORE8
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0xffn]

MSIZE:
  code:
    - MSIZE
  expect:
    stack: [0n]

MSIZE (0x20):
  code:
    - PUSH1 0
    - MLOAD
    - POP
    - MSIZE
  expect:
    stack: [0x20n]

MSIZE (0x60):
  code:
    - PUSH1 0x39
    - MLOAD
    - POP
    - MSIZE
  expect:
    stack: [0x60n]

MSIZE (after MSTORE):
  code:
    - PUSH1 0xff
    - PUSH1 0xff
    - MSTORE8
    - MSIZE
  expect:
    stack: [0x100n]

SHA3:
  code:
    - PUSH32 0xffffffff00000000000000000000000000000000000000000000000000000000
    - PUSH1 0
    - MSTORE
    - PUSH1 4
    - PUSH1 0
    - SHA3
  expect:
    stack: [0x29045a592007d0c246ef02c2223570da9522d0cf0f73282c79a1bc8f0bb2c238n]

ADDRESS:
  tx:
    to: 0x1000000000000000000000000000000000000aaan
  code:
    - ADDRESS
  expect:
    stack: [0x1000000000000000000000000000000000000aaan]

CALLER:
  tx:
    from: 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn
  code:
    - CALLER
  expect:
    stack: [0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn]

BALANCE:
  state:
    0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn:
      balance: 0x100n
  code:
    - PUSH20 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d
    - BALANCE
  expect:
    stack: [0x100n]

BALANCE (empty):
  code:
    - PUSH20 0xaf69610ea9ddc95883f97a6a3171d52165b69b03
    - BALANCE
  expect:
    stack: [0n]

ORIGIN:
  tx:
    origin: 0x1337n
  code:
    - ORIGIN
  expect:
    stack: [0x1337n]

COINBASE:
  block:
    coinbase: 0x777n
  code:
    - COINBASE
  expect:
    stack: [0x777n]

TIMESTAMP:
  block:
    timestamp: 15000001n
  code:
    - TIMESTAMP
  expect:
    stack: [15000001n]

NUMBER:
  block:
    number: 0x1000001n
  code:
    - NUMBER
  expect:
    stack: [0x1000001n]

DIFFICULTY:
  block:
    difficulty: 0x20000n
  code:
    - DIFFICULTY
  expect:
    stack: [0x20000n]

GASLIMIT:
  block:
    gaslimit: 0xffffffffffffn
  code:
    - GASLIMIT
  expect:
    stack: [0xffffffffffffn]

GASPRICE:
  tx:
    gasprice: 0x99n
  code:
    - GASPRICE
  expect:
    stack: [0x99n]

BASEFEE:
  block:
    basefee: 0x1n
  code:
    - BASEFEE
  expect:
    stack: [0x1n]

CHAINID:
  block:
    chainid: 1n
  code:
    - CHAINID
  expect:
    stack: [1n]

BLOCKHASH:
  block:
    number: 0x1000001n
  code:
    - PUSH1 0
    - BLOCKHASH
  expect:
    stack: [0x0n]

CALLVALUE:
  tx:
    value: 0x1000n
  code:
    - CALLVALUE
  expect:
    stack: [0x1000n]

CALLDATALOAD:
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - PUSH1 0
    - CALLDATALOAD
  expect:
    stack: [0x000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeffn]

CALLDATALOAD (tail):
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - PUSH1 31
    - CALLDATALOAD
  expect:
    stack: [0xff00000000000000000000000000000000000000000000000000000000000000n]

CALLDATASIZE:
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - CALLDATASIZE
  expect:
    stack: [32n]

CALLDATASIZE (no data):
  code:
    - CALLDATASIZE
  expect:
    stack: [0n]

CALLDATACOPY:
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - PUSH1 32
    - PUSH1 0
    - PUSH1 0
    - CALLDATACOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeffn]

CALLDATACOPY (tail):
  tx:
    data: 000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - CALLDATACOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0xff00000000000000000000000000000000000000000000000000000000000000n]

CODESIZE (small):
  code:
    - CODESIZE # 1 byte
  expect:
    stack: [1n]

CODESIZE:
  code:
    - PUSH20 0 # 21 bytes
    - POP # 1 byte
    - CODESIZE # 1 byte
  expect:
    stack: [23n]

CODECOPY:
  code:
    - PUSH1 32
    - PUSH1 0
    - PUSH1 0
    - CODECOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x60_20_60_00_60_00_39_60_00_51_00000000000000000000000000000000000000000000n]

CODECOPY (tail):
  code:
    - PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    - POP
    - PUSH1 2
    - PUSH1 32
    - PUSH1 0
    - CODECOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0xff_50_000000000000000000000000000000000000000000000000000000000000n]

EXTCODESIZE (empty):
  code:
    - PUSH20 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d
    - EXTCODESIZE
  expect:
    stack: [0n]

EXTCODESIZE:
  state:
    0x1000000000000000000000000000000000000aaan:
      code:
        - PUSH1 1 # 2 bytes
  code:
    - PUSH20 0x1000000000000000000000000000000000000aaa
    - EXTCODESIZE
  expect:
    stack: [2n]

EXTCODECOPY:
  state:
    0x1000000000000000000000000000000000000aaan:
      code: '6001'
  code:
    - PUSH1 32
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000aaa
    - EXTCODECOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x60_01_000000000000000000000000000000000000000000000000000000000000n]

EXTCODEHASH:
  state:
    0x1000000000000000000000000000000000000aaan:
      code: 'FFFFFFFF'
  code:
    - PUSH20 0x1000000000000000000000000000000000000aaa
    - EXTCODEHASH
  expect:
    stack: [0x29045a592007d0c246ef02c2223570da9522d0cf0f73282c79a1bc8f0bb2c238n]

EXTCODEHASH (empty):
  code:
    - PUSH20 0x1000000000000000000000000000000000000aaa
    - EXTCODEHASH
  expect:
    stack: [0x0n]

SELFBALANCE:
  tx:
    to: 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn
  state:
    0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159dn:
      balance: 0x200n
  code:
    - SELFBALANCE
  expect:
    stack: [0x200n]

SSTORE:
  code:
    - PUSH1 1
    - PUSH1 0
    - SSTORE
    - PUSH1 0
    - SLOAD
  expect:
    stack: [1n]

SSTORE (non-zero location):
  code:
    - PUSH1 2
    - PUSH4 0x98fe5c2c
    - SSTORE
    - PUSH4 0x98fe5c2c
    - SLOAD
  expect:
    stack: [2n]

SLOAD (empty):
  code:
    - PUSH1 0xff
    - SLOAD
  expect:
    stack: [0n]

LOG0:
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xaa
    - PUSH1 0
    - MSTORE
    - PUSH1 1
    - PUSH1 31
    - LOG0
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'aa'
        topics: []

LOG1:
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xbb
    - PUSH1 0
    - MSTORE
    - PUSH32 0x1111111111111111111111111111111111111111111111111111111111111111
    - PUSH1 1
    - PUSH1 31
    - LOG1
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'bb'
        topics:
          - 0x1111111111111111111111111111111111111111111111111111111111111111n

LOG2:
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xcc
    - PUSH1 0
    - MSTORE
    - PUSH32 0x1111111111111111111111111111111111111111111111111111111111111111
    - PUSH32 0x2222222222222222222222222222222222222222222222222222222222222222
    - PUSH1 1
    - PUSH1 31
    - LOG2
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'cc'
        topics:
          - 0x2222222222222222222222222222222222222222222222222222222222222222n
          - 0x1111111111111111111111111111111111111111111111111111111111111111n

LOG3:
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xdd
    - PUSH1 0
    - MSTORE
    - PUSH32 0x1111111111111111111111111111111111111111111111111111111111111111
    - PUSH32 0x2222222222222222222222222222222222222222222222222222222222222222
    - PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333
    - PUSH1 1
    - PUSH1 31
    - LOG3
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'dd'
        topics:
          - 0x3333333333333333333333333333333333333333333333333333333333333333n
          - 0x2222222222222222222222222222222222222222222222222222222222222222n
          - 0x1111111111111111111111111111111111111111111111111111111111111111n

LOG4:
  tx:
    to: 0x1000000000000000000000000000000000000001n
  code:
    - PUSH1 0xee
    - PUSH1 0
    - MSTORE
    - PUSH32 0x1111111111111111111111111111111111111111111111111111111111111111
    - PUSH32 0x2222222222222222222222222222222222222222222222222222222222222222
    - PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333
    - PUSH32 0x4444444444444444444444444444444444444444444444444444444444444444
    - PUSH1 1
    - PUSH1 31
    - LOG4
  expect:
    logs:
      - address: 0x1000000000000000000000000000000000000001n
        data: 'ee'
        topics:
          - 0x4444444444444444444444444444444444444444444444444444444444444444n
          - 0x3333333333333333333333333333333333333333333333333333333333333333n
          - 0x2222222222222222222222222222222222222222222222222222222222222222n
          - 0x1111111111111111111111111111111111111111111111111111111111111111n

RETURN:
  code:
    - PUSH1 0xA2
    - PUSH1 0
    - MSTORE
    - PUSH1 1
    - PUSH1 31
    - RETURN
  expect:
    success: true
    return: 'a2'

REVERT:
  code:
    - PUSH1 0xF1
    - PUSH1 0
    - MSTORE
    - PUSH1 1
    - PUSH1 31
    - REVERT
  expect:
    success: false
    return: 'f1'

CALL:
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - RETURN
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x42n, 0x1n]

CALL (returns address):
  tx:
    to: 0x1000000000000000000000000000000000000aaan
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - CALLER
        - PUSH1 0
        - MSTORE
        - PUSH1 32
        - PUSH1 0
        - RETURN
  code:
    - PUSH1 32
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x1000000000000000000000000000000000000aaan, 0x1n]

CALL (reverts):
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - REVERT
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x42n, 0x0n]

RETURNDATASIZE (empty):
  code:
    - RETURNDATASIZE
  expect:
    stack: [0x0n]

RETURNDATASIZE:
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - RETURN
  code:
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - POP
    - RETURNDATASIZE
  expect:
    stack: [0x1n]

RETURNDATACOPY:
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - RETURN
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - CALL
    - POP
    - PUSH1 1
    - PUSH1 0
    - PUSH1 0xff
    - RETURNDATACOPY
    - PUSH1 0xff
    - MLOAD
  expect:
    stack: [0x4200000000000000000000000000000000000000000000000000000000000000n]

CALLCODE:
  todo: true

DELEGATECALL:
  tx:
    to: 0x1000000000000000000000000000000000000aaan
  state:
    0xddddddddddddddddddddddddddddddddddddddddn:
      code:
        - ADDRESS
        - PUSH1 0
        - SSTORE
  code:
    - PUSH1 0
    - DUP1
    - DUP1
    - DUP1
    - PUSH20 0xdddddddddddddddddddddddddddddddddddddddd
    - GAS
    - DELEGATECALL
    - PUSH1 0
    - SLOAD
  expect:
    stack: [0x1000000000000000000000000000000000000aaan, 1n]

STATICCALL:
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - MSTORE
        - PUSH1 1
        - PUSH1 31
        - RETURN
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - STATICCALL
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0x42n, 0x1n]

STATICCALL (reverts on write):
  state:
    0x1000000000000000000000000000000000000c42n:
      code:
        - PUSH1 0x42
        - PUSH1 0
        - SSTORE
  code:
    - PUSH1 1
    - PUSH1 31
    - PUSH1 0
    - PUSH1 0
    - PUSH20 0x1000000000000000000000000000000000000c42
    - PUSH1 0
    - STATICCALL
  expect:
    stack: [0x0n]

CREATE (empty):
  tx:
    to: 0x9bbfed6889322e016e0a02ee459d306fc19545d8n
  code:
    - PUSH1 0
    - PUSH1 0
    - PUSH1 9
    - CREATE
    - BALANCE
  expect:
    stack: [9n]

CREATE (with 4x FF):
  tx:
    to: 0x9bbfed6889322e016e0a02ee459d306fc19545d8n
  code:
    - PUSH1 32 # size for EXTCODECOPY
    - PUSH1 0 # code offset
    - PUSH1 0 # dest offset
    - PUSH13 0x63FFFFFFFF6000526004601CF3
    - PUSH1 0
    - MSTORE
    - PUSH1 13
    - PUSH1 19
    - PUSH1 0
    - CREATE
    - EXTCODECOPY
    - PUSH1 0
    - MLOAD
  expect:
    stack: [0xffffffff00000000000000000000000000000000000000000000000000000000n]

CREATE (reverts):
  tx:
    to: 0x9bbfed6889322e016e0a02ee459d306fc19545d8n
  code:
    - PUSH13 0x63FFFFFFFF6000526004601CFD
    - PUSH1 0
    - MSTORE
    - PUSH1 13
    - PUSH1 19
    - PUSH1 0
    - CREATE
  expect:
    stack: [0n]

CREATE2:
  todo: true

SELFDESTRUCT:
  state:
    0xdead00000000000000000000000000000000deadn:
      balance: 0x7n
      code:
        - PUSH20 0xa1c300000000000000000000000000000000a1c3
        - SELFDESTRUCT
  code:
    - PUSH1 0
    - DUP1
    - DUP1
    - DUP1
    - DUP1
    - PUSH20 0xdead00000000000000000000000000000000dead
    - GAS
    - CALL
    - POP
    - PUSH20 0xa1c300000000000000000000000000000000a1c3
    - BALANCE
    - PUSH20 0xdead00000000000000000000000000000000dead
    - EXTCODESIZE
  expect:
    stack: [0x0n, 0x7n]
